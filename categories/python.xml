<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Narendra Mukherjee (Posts about Python)</title><link>https://narendramukherjee.github.io/</link><description></description><atom:link href="https://narendramukherjee.github.io/categories/python.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2022 &lt;a href="mailto:narendra.mukherjee@gmail.com"&gt;Narendra Mukherjee&lt;/a&gt; </copyright><lastBuildDate>Mon, 31 Jan 2022 17:36:11 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>When features go missing, Bayes' comes to the rescue</title><link>https://narendramukherjee.github.io/blog/when-features-go-missing-bayes-comes-to-the-rescue/</link><dc:creator>Narendra Mukherjee</dc:creator><description>&lt;p&gt;In the midst of all the mess, one of the great things to grow out of the ongoing pandemic is the online conference. It has made it possible for so many more people to attend and learn from international conferences, in a way that doesn't break the bank or the work week!&lt;/p&gt;
&lt;p&gt;In that spirit, the &lt;a class="reference external" href="https://global.pydata.org/"&gt;2020 Global PyData conference&lt;/a&gt; has gone entirely online and consists of pre-recorded talks from speakers together with Q&amp;amp;A sessions that are aligned to a variety of time zones. I was fortunate to have a part of my recent work at Tripadvisor be accepted at the conference for a 30 min talk; preparing and recording an online talk was a totally new experience for me, and I think I have learnt a lot of new presentation (and environment setup) skills in the process.&lt;/p&gt;
&lt;p&gt;In this talk, I go over the merit of thinking deeply about missing values in any real-world machine learning problem, especially those that involve tree-based models. I go on to talk about the imputation approach that we used while designing a recommendation system at Tripadvisor, and discuss how it can be thought of as a simplified Bayesian inference recipe in a probabilistic graph.&lt;/p&gt;
&lt;p&gt;I am really excited about the talk and the feedback I am going to get during the Q&amp;amp;A session - do browse the &lt;a class="reference external" href="https://narendramukherjee.github.io/pydata_global_talk/PyData_Global_2020.pdf"&gt;slides from the talk&lt;/a&gt; in the meantime!&lt;/p&gt;</description><category>Bayesian</category><category>machine learning</category><category>open source</category><category>Python</category><guid>https://narendramukherjee.github.io/blog/when-features-go-missing-bayes-comes-to-the-rescue/</guid><pubDate>Wed, 14 Oct 2020 20:37:28 GMT</pubDate></item><item><title>Open source neuroscience at Boston Python</title><link>https://narendramukherjee.github.io/blog/open-source-neuroscience-at-boston-python/</link><dc:creator>Narendra Mukherjee</dc:creator><description>&lt;a class="reference external image-reference" href="https://narendramukherjee.github.io/images/boston_python_1.jpg"&gt;&lt;img alt="/images/boston_python_1.thumbnail.jpg" src="https://narendramukherjee.github.io/images/boston_python_1.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://narendramukherjee.github.io/images/boston_python_3.jpg"&gt;&lt;img alt="/images/boston_python_3.thumbnail.jpg" src="https://narendramukherjee.github.io/images/boston_python_3.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://narendramukherjee.github.io/images/boston_python_2.jpg"&gt;&lt;img alt="/images/boston_python_2.thumbnail.jpg" src="https://narendramukherjee.github.io/images/boston_python_2.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;Last week, my labmate &lt;a class="reference external" href="https://sites.google.com/a/brandeis.edu/katzlab/people/current/joseph-wachutka"&gt;Joseph Wachutka&lt;/a&gt; and I got an opportunity to talk to the &lt;a class="reference external" href="https://www.meetup.com/bostonpython/"&gt;Boston Python User Group&lt;/a&gt; about our efforts in developing open-source tools in Python for electrophysiology. Boston Python is an amazing mix of Python-lovers, both seasoned and novice, who are always ready to listen, ask incisive questions and offer great feedback! It was enlightening (and very encouraging!) to talk to people interested in pushing open source - many of the questions from the audience were right on target and brought forth the very involved hardware and software challenges we have hacked around in the last few years.&lt;/p&gt;
&lt;p&gt;Despite being a central technique in systems neuroscience, electrophysiology has been dominated by expensive proprietary technologies. Throughout our PhD work, Joe and I have tried to develop open source tools (mostly using the Raspberry Pi, Linux and Python) that help us run experiments and record, clean and analyze data. Apart from reducing the costs of performing complex electrophysiological and optogenetic studies by an order of magnitude, we hope that these efforts will make our science easier to share and reproduce (and shouldn't that be the ultimate goal for all scientists anyways?).&lt;/p&gt;
&lt;p&gt;Here are the &lt;a class="reference external" href="https://narendramukherjee.github.io/boston_python_talk/index.html"&gt;slides&lt;/a&gt; for my talk at Boston Python. Please do read about our &lt;a class="reference external" href="https://sites.google.com/a/brandeis.edu/katzlab/technology"&gt;Raspberry Pi based hardware setup&lt;/a&gt; and our recent &lt;a class="reference external" href="http://conference.scipy.org/proceedings/scipy2017/narendra_mukherjee.html"&gt;Scipy Paper&lt;/a&gt; describing our HDF5-based data management and analysis pipeline.&lt;/p&gt;</description><category>electrophysiology</category><category>neuroscience</category><category>open source</category><category>Python</category><guid>https://narendramukherjee.github.io/blog/open-source-neuroscience-at-boston-python/</guid><pubDate>Tue, 25 Jul 2017 23:54:50 GMT</pubDate></item><item><title>String completion as you move to Python 3 (OR, how curly braces became important)</title><link>https://narendramukherjee.github.io/blog/string-completion-as-you-move-to-python-3-or-how-curly-braces-became-important/</link><dc:creator>Narendra Mukherjee</dc:creator><description>&lt;p&gt;I am currently in the midst of (&lt;strong&gt;FINALLY!!&lt;/strong&gt;) making the shift from trusted Python 2.7 to Python 3.x (while recovering from an extended holiday thanks to a somewhat lengthy visa renewal process). Making the shift itself is pretty simple, thanks to a nifty, command line tool built within the Python standard library itself (at least on Linux) called, very simply, &lt;a class="reference external" href="https://docs.python.org/2/library/2to3.html"&gt;2to3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Its always a good idea to keep backups of legacy code (of course!), and to actually write changes to file, so the command goes something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;2to3 -w *.py&lt;/pre&gt;
&lt;p&gt;I am in the habit of using % as a placeholder for string completion in Python 2.x. That behavior doesn't go out of use entirely in Python 3.x, but using the str.format() method is recommended instead - see more &lt;a class="reference external" href="https://docs.python.org/2/library/string.html#format-string-syntax"&gt;details&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most of string completion code worked out of the box in Python 3 - I only realized that the norm had changed when I had curly braces "&lt;strong&gt;{}&lt;/strong&gt;" in my strings. It turns out that curly braces have a special meaning in Python 3 strings - they are placeholders, in addition to the % sign. The format goes something like this:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_5f37c5411b6e4542936e9a6232746af1-1" name="rest_code_5f37c5411b6e4542936e9a6232746af1-1" href="https://narendramukherjee.github.io/blog/string-completion-as-you-move-to-python-3-or-how-curly-braces-became-important/#rest_code_5f37c5411b6e4542936e9a6232746af1-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s2"&gt;"my string &lt;/span&gt;&lt;span class="si"&gt;{:d}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_5f37c5411b6e4542936e9a6232746af1-2" name="rest_code_5f37c5411b6e4542936e9a6232746af1-2" href="https://narendramukherjee.github.io/blog/string-completion-as-you-move-to-python-3-or-how-curly-braces-became-important/#rest_code_5f37c5411b6e4542936e9a6232746af1-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'my string 1'&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;However, the braces themselves need to be encapsulated in a second set of braces to be printed. So, for example:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_dbfba0775d784a889d98ce591ef242bc-1" name="rest_code_dbfba0775d784a889d98ce591ef242bc-1" href="https://narendramukherjee.github.io/blog/string-completion-as-you-move-to-python-3-or-how-curly-braces-became-important/#rest_code_dbfba0775d784a889d98ce591ef242bc-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s2"&gt;"my string {{&lt;/span&gt;&lt;span class="si"&gt;{:d}&lt;/span&gt;&lt;span class="s2"&gt;}}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_dbfba0775d784a889d98ce591ef242bc-2" name="rest_code_dbfba0775d784a889d98ce591ef242bc-2" href="https://narendramukherjee.github.io/blog/string-completion-as-you-move-to-python-3-or-how-curly-braces-became-important/#rest_code_dbfba0775d784a889d98ce591ef242bc-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;'my string &lt;/span&gt;&lt;span class="si"&gt;{1}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;In brief, the braces outside the number placeholder &lt;code&gt;{:d}&lt;/code&gt; have to be encapsulated in a second (or third, depending on how you look at it) set of braces :)&lt;/p&gt;</description><category>Python</category><guid>https://narendramukherjee.github.io/blog/string-completion-as-you-move-to-python-3-or-how-curly-braces-became-important/</guid><pubDate>Sat, 04 Feb 2017 03:00:23 GMT</pubDate></item></channel></rss>